<?xml version="1.0"?>

<!-- ===================================================================
Build file for 'nextreports' application

Most useful targets:

  - compile -> compile all java sources
  - jar     -> creates the application's jar file
  - clean   -> removes all the generated files and directories
  - dist    -> creates the distribution
  - release -> creates the artifacts  

Authors:
  Decebal Suiu <decebal.suiu@asf.ro>

Copyright:
  Copyright (c) 2006-2013, The NextReports team. All rights reserved.
==================================================================== -->

<project name="nextreports-designer" default="release" xmlns:ivy="antlib:org.apache.ivy.ant">

    <property file="local.properties"/>
    <property file="build.properties"/>

    <property name="app.mainclass" value="ro.nextreports.designer.Main"/>
	
	<property name="ivy.lib.dir" value="${app.lib}"/>
	        
    <import file="ivy-build.xml"/>
    
    <!-- Classpath -->
    <path id="classpath">
        <fileset dir="${app.lib}" includes="*.jar"/>
        <fileset dir="${ant.tasks.dir}" includes="*.jar"/>
    </path>                

    <!-- ================================================================== -->
    <!-- I V Y . I N I T                                                    -->
    <!-- ================================================================== -->

    <target name="ivy.init" depends="ivy.download">
        <!-- Download the ivy jar and defines ivy tasks -->
        <path id="ivy.lib.path">
              <pathelement location="${ivy.jar.file}"/>
        </path>
        <!-- The ivy tasks are dependent by ivy.lib.path declared above -->
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>
                
    <!-- ================================================================== -->
    <!-- I V Y . R E S O L V E                                              -->
    <!-- ================================================================== -->

    <!-- resolve dependent libraries -->
    <target name="ivy.resolve" depends="ivy.init">      
        <ivy:configure file="ivysettings.xml" />
        <ivy:resolve file="ivy.xml"/>
        <!--
        <ivy:retrieve pattern="${ivy.lib.dir}/[artifact].[ext]" conf="runtime"/>
        -->
        <ivy:retrieve sync="true" changing="true" overwriteMode="newer"/>
        
        <mkdir dir="ivy-report"/>
        <ivy:report todir="ivy-report"/>
    </target>
	
	<!-- ================================================================== -->
    <!-- V E R S I O N                                                      -->
    <!-- ================================================================== -->

    <target name="version">
        <!-- Add ant task -->
        <taskdef
            name="jreleaseinfo"
            classname="ch.oscg.jreleaseinfo.anttask.JReleaseInfoAntTask"
            classpath="${ant.tasks.dir}/jreleaseinfo-1.3.0.jar"
        />

        <property name="app.src.dir" location="${app.src}"/>

        <property environment="env"/>
        <!-- 'BUILD_NUMBER' variable is created by HUDSON CI SERVER before each build run -->
    	<property name="env.BUILD_NUMBER" value="0"/>
        <property name="build.number" value="${env.BUILD_NUMBER}"/>

        <!-- Create release info -->
        <jreleaseinfo
            classname="ReleaseInfo"        	
            packagename="ro.nextreports.designer"
            targetdir="${app.src.dir}"
            project="NextReports"
            version="${app.version}">
                <parameter name="company" value="NextReports"/>
                <parameter name="home" value="www.next-reports.com"/>
        	    <parameter name="buildNumber" value="${build.number}" type="int"/>
				<parameter name="copyright" value="${app.copyright}"/>
        </jreleaseinfo>
    </target>
		
    <!-- ================================================================== -->
    <!-- C O M P I L E                                                      -->
    <!-- ================================================================== -->

    <target name="compile" depends="ivy.resolve,version">
        <!-- Create the ${app.classes} directory -->
        <mkdir dir="${app.classes}"/>        

        <!-- Compile the java code from ${app.src} into ${app.classes} -->
        <javac
            srcdir="${app.src}"
            destdir="${app.classes}"
            debug="${javac.debug}"
            verbose="${javac.verbose}"
            deprecation="${javac.deprecation}"
            classpathref="classpath"
        />       
    </target>

    <!-- ================================================================== -->
    <!-- J A R                                                              -->
    <!-- ================================================================== -->

    <target name="jar" depends="compile,user.data.zip">
        <delete file="${app.target}/${app.jar}"/>

    	<!-- Update version number in driver_template.xml -->
    	<replace file="${app.src}/driver_template.xml" token="@app.version@" value="${app.version}"/>
    	
        <!-- Create jar file -->
        <jar jarfile="${app.target}/${app.jar}" compress="true">
            <fileset dir="${app.classes}" includes="ro/nextreports/designer/**/*.class"/>
            <fileset dir="${app.src}" >
                <include name="**/*.properties"/>
            	<include name="**/*xml"/>
            	<include name="**/*png"/>
            	<include name="**/*gif"/>
            	<include name="**/*zip"/>
            </fileset>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Main-Class" value="${app.mainclass}"/>
                <attribute name="Implementation-Version" value="${app.version}"/>
            </manifest>
        </jar>    	
    </target>

    <!-- ================================================================== -->
    <!-- D I S T                                                            -->
    <!-- ================================================================== -->

    <target name="dist" depends="jar">
        <!-- Create the ${app.dist} directory -->
        <mkdir dir="${app.dist}"/>

        <!-- Copy all needed files from ${app.config} to ${app.dist.config} -->
    	<!--<copy todir="${app.dist.config}">
            <fileset dir="${app.config}">
            	<include name="*.properties"/>
            	<include name="*.dtd"/>
            	<include name="*.xml"/>
            </fileset>
        </copy> -->

        <copy todir="${app.dist}">
            <fileset dir="${app.home}">
            	<include name="licence.txt"/>
            	<include name="driverpath.txt"/>
                <include name="readme.txt"/>
            </fileset>
        </copy>

        <!-- Create the ${app.dist.lib} directory -->
        <mkdir dir="${app.dist.lib}"/>

        <!-- Copy all jar files from ${app.lib} to ${app.dist.lib} -->
        <copy todir="${app.dist.lib}">
            <fileset dir="${app.lib}">
            	<include name="*.jar"/>
            	<include name="*.dll"/>
            	<include name="*.so"/>
            </fileset>
        </copy>

        <!-- Copy ${app.jar} file to ${app.dist.lib} -->
        <copy file="${app.target}/${app.jar}" todir="${app.dist.lib}"/>

        <!-- Create the ${app.dist.log} directory -->
    	<!--<mkdir dir="${app.dist.log}"/>-->

        <!-- Copy drivers -->    	
        <mkdir dir="${app.dist}/jdbc-drivers"/>
        <copy todir="${app.dist}/jdbc-drivers">
            <fileset dir="${app.home}/jdbc-drivers"/>
        </copy>        
    	
        <!-- Copy templates -->
    	<!--<mkdir dir="${app.dist}/templates"/>
        <copy todir="${app.dist}/templates">
            <fileset dir="${app.home}/templates"/>
        </copy>-->
    	
    	<!-- Copy demo -->
    	<!--<copy todir="${app.dist}">
             <fileset dir="${app.home}">
             	<include name="datasource.xml"/>
             	<include name="output/Demo/**"/>
                <include name="demo/**"/>
             	<include name="schemas.xml"/>
             </fileset>
         </copy>-->    
    </target>
	

    <!-- ================================================================== -->
    <!-- D I S T . Z I P                                                    -->
    <!-- ================================================================== -->

    <target name="dist.zip" depends="dist">
        <property name="app.zip.dir" location="${app.target}/${app.version}/${app.name}-${app.version}"/>

        <!-- Create a temporary dir -->
        <mkdir dir="${app.zip.dir}"/>

        <!-- Copy dist in temporary dir -->
        <copy todir="${app.zip.dir}">
            <fileset dir="${app.dist}"/>
        </copy>

        <!-- Create the zip with dist -->
        <zip destfile="${app.target}/${app.name}-${app.version}.zip" basedir="${app.target}/${app.version}"/>

        <!-- Delete the temporary dir -->
        <delete dir="${app.target}/${app.version}"/>
    </target>
	
	<!-- ================================================================== -->
	<!-- U S E R . D A T A . Z I P                                          -->
	<!-- ================================================================== -->

	<target name="user.data.zip">
	    <property name="user.data.zip.dir" location="${app.target}/${app.version}"/>

		<!-- Create a temporary dir -->
	    <mkdir dir="${user.data.zip.dir}"/>
		
		<!-- Create log directory -->
		<mkdir dir="${user.data.zip.dir}/logs"/>
		
		<!-- Create config directory -->
		<mkdir dir="${user.data.zip.dir}/config"/>
		<!-- Copy config in temporary dir -->
		<copy todir="${user.data.zip.dir}/config">			    				    	
			<fileset dir="${app.config}">
			  	<include name="*.properties"/>
				<include name="*.dtd"/>
				<include name="*.xml"/>
			</fileset>
		</copy>	
		
		<!-- Create templates directory -->
		<mkdir dir="${user.data.zip.dir}/templates"/>
		<!-- Copy templates -->
		<copy todir="${user.data.zip.dir}/templates">
			<fileset dir="${app.home}/templates"/>
		</copy>	

	    <!-- Copy demo in temporary dir -->
	    <copy todir="${user.data.zip.dir}">	    		    	    		    		    	
	    	<!-- Copy demo -->
	    	<fileset dir="${app.home}">
	    		<include name="datasource.xml"/>
	    		<include name="output/Demo/**"/>
	    		<include name="demo/**"/>
	    		<include name="schemas.xml"/>
	    	</fileset>
	    </copy>								    			    			    			    

	    <!-- Create the zip with user data dist -->
	    <zip destfile="${app.target}/${app.name}-data-${app.version}.zip" basedir="${app.target}/${app.version}"/>
		
		<copy file="${app.target}/${app.name}-data-${app.version}.zip" todir="${app.src}"/>		
		
		<!-- Delete the temporary dir -->
		<delete dir="${app.target}/${app.version}"/>		    
	</target>
	
    <!-- ================================================================== -->
    <!-- L E X E R . S Q L                                                  -->
    <!-- ================================================================== -->

    <target name="lexer.sql">
        <!-- Add ant task -->
        <taskdef
            name="jflex"
            classname="JFlex.anttask.JFlexTask"
            classpath="ant-tasks/jflex-1.4.2.jar"
        />
        
        <jflex file="lexers/sql.flex" destdir="${app.src}"/>
    </target>
	
    <!-- ================================================================== -->
    <!-- R E L E A S E                                                      -->
    <!-- ================================================================== -->

    <target name="release" depends="dist.zip">
    	<copy todir="${app.artifacts}">
    		<fileset dir="${app.target}">
    		    <include name="${app.name}-${app.version}.zip"/>
    		</fileset>
    	</copy>
    </target>

    <!-- ================================================================== -->
    <!-- C L E A N                                                          -->
    <!-- ================================================================== -->

    <target name="clean">
        <delete dir="${app.target}"/>
        <delete dir="${app.dist}"/>
        <delete dir="${app.artifacts}"/>
        <delete dir="${ivy.lib.dir}"/>
    </target>
	
	<target name="ivy.cleancache">
		<ivy:cleancache/>
	</target>
	
</project>
